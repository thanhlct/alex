def decision_values(goal, slot):
    return ['accept', 'delay', 'reject',]

def reward_last_turn(goal, last_da):
    return -1

def reward_final_goal(goal, turns):
    sys_predict = turns[len(turns)-1]['sys_da'][0][0].dat
    if sys_predict == goal['decision']:
        return 20
    return -100

config = {
    'user_simulator':{
        'SimpleUserSimulator':{
            'metadata':{
            'slots': ['decision',],
            'goals': [
                    {'fixed_slots':[],
                    'changeable_slots':['decision',],
                    'one_of_slot_set':[],
                    'equivalent_slots':[],
                    'sys_unaskable_slots':[],
                    'default_slots_values':[],
                    'active_prob':1.0,
                    'same_table_slot_keys':[],
                    'goal_post_process_fun': None,
                    'goal_slot_relax_fun': None,
                    'reward_last_da_fun': reward_last_turn,
                    'reward_final_goal_fun': reward_final_goal,
                    'end_dialogue_post_process_fun': None,
                    'slot_used_sequence':{},
                    },
                ],
            'slot_table_field_mapping':{'decision':[decision_values],
                                    },
            'same_table_slots':{},

            'status_included': ['correct', 'incorect', 'pending', 'filled', 'all'],# only for imagining, some laters imtes was not implemented
            'value_from':['goal', 'sys_da'],#only for imagining
            'slot_from': ['sys_da', 'goal', 'none'],
            'answer_types':['direct_answer', 'over_answer', 'complete_answer'],#only for easy seeing and imagining

            'dialogue_act_definitions': {#dialogue acts which user simulator used for answering
                'inform':{
                    'slot_included': True,
                    'value_included': True,
                    'slot_from': 'sys_da', #in normal case, list of slots will be informed is taken from system dialogue request act, or from goal
                    'value_from': 'goal', #in normal case, where to get values for selected slots
                    'accept_used_slots': True,
                },
                'oog':{
                    'slot_included': False,
                    'value_included': False,
                    'act_without_slot': True,
                },
               'silence':{
                    'slot_included': False,
                    'value_included': False,
                    'act_without_slot': True,
                },
                'end':{
                    'slot_included': False,
                    'value_included': False,
                    'act_without_slot': True,
                }
            },
            'reply_system_acts':{#how to combine several act types to respon an actions,list like below is quite ok, but ???
                'request':[{'return_acts':['inform'],#return acts canbe multiple act
                            'active_prob':0.85,
                            },
                            {'return_acts':['silence'],
                            'active_prob':0.05,
                            },
                            {'return_acts':['oog'],
                            'active_prob':0.1,
                            }
                 ],
                 'inform':[{'return_acts':[],
                        'active_prob':1.0,
                    },
                 ],
                'accept':[{'return_acts':['end'],
                        'active_prob':1.0,
                    },
                 ],              
            },
        },#end of metatdata
        },#end of SimpleUserSimulator
    },#end of user_simulator
}#end of config
