#!/usr/bin/env python
# vim: set fileencoding=UTF-8 filetype=python :
#
#  When the configuration file is loaded, several automatic transformations
#  are applied:
#
# 1) '{cfg_abs_path}' as a substring of atomic attributes is replaced by
#    an absolute path of the configuration files.  This can be used to
#    make the configuration file independent of the location of programs
#    using the configuration file.
#
# or better use the as_project_path function

from alex.components.dm.dddstate import DeterministicDiscriminativeDialogueState
from alex.components.dm.dummypolicy import DummyDialoguePolicy
from alex.components.slu.dailrclassifier import DAILogRegClassifier
from alex.utils.mproc import SystemLogger
from alex.utils.sessionlogger import SessionLogger
from alex.utils.excepthook import ExceptionHook
from alex.utils.config import as_project_path, online_update
from alex.utils.analytics import Analytics

config = {
    'General': {
        'include': [as_project_path('resources/private/default.cfg')],
        'debug': False,
    },
    'Analytics': Analytics(),
    'Audio': {
        'sample_rate': 16000,
        'samples_per_frame': 256,
    },
    'AudioIO': {
        'play_buffer_size': 1024,
        'debug': True,
        'output_dir': './aio_call_log',
    },
    'VoipIO': {
        'pjsip_log_level': 3,
        'debug': True,
        'reject_calls': False,
        'allowed_phone_numbers': r"(^[234567])",
        'forbidden_phone_number': r"(^112$|^150$|^155$|^156$|^158$)",
        'allowed_users': r"(^[234567])",
        'forbidden_users': r"(^112$|^150$|^155$|^156$|^158$)",
        'allowed_hosts': r"",
        'forbidden_hosts': r"",
        'phone_number_obfuscation': True,
        'n_rwa': 5,
        'domain': 'name_of_the_sip_server',
        'user': 'your_sip_user_name',
        'password': 'your_sip_account_password',
    },
    'VAD': {
        'debug': False,
        'type': 'ffnn',
        'speech_buffer_frames': 35,
        'decision_frames_speech': 15,
        'decision_frames_sil': 35,
        'decision_speech_threshold': 0.7,
        'decision_non_speech_threshold': 0.1,
        'n_rwa': 5,
        'power': {
            'threshold': 70,
            'threshold_multiplier': 1.0,
            'adaptation_frames': 30,
        },
        'gmm': {
            'frontend': 'MFCC',
            'framesize': 512,
            'frameshift': 160,
            'usehamming': True,
            'preemcoef': 0.97,
            'numchans': 26,
            'ceplifter': 22,
            'numceps': 12,
            'enormalise': True,
            'zmeansource': True,
            'usepower': True,
            'usec0': False,
            'usecmn': False,
            'usedelta': True,
            'useacc': True,
            'n_last_frames': 0,
            'lofreq': 125,
            'hifreq': 3800,
            'speech_model': '{cfg_abs_path}/vad/voip/vad_speech_sds_mfcc_m064_f100000.gmm',
            'sil_model': '{cfg_abs_path}/vad/voip/vad_sil_sds_mfcc_m064_f100000.gmm',
            'filter_length': 2,
        },
        'ffnn': {
            'frontend': 'MFCC',
            'framesize': 512,
            'frameshift': 160,
            'usehamming': True,
            'preemcoef': 0.97,
            'numchans': 26,
            'ceplifter': 22,
            'numceps': 12,
            'enormalise': True,
            'zmeansource': True,
            'usepower': True,
            'usec0': False,
            'usecmn': False,
            'usedelta': False,
            'useacc': False,
            'n_last_frames': 30, # 15,
            'n_prev_frames': 15,
            'mel_banks_only': True,
            'lofreq': 125,
            'hifreq': 3800,
            #'model': online_update('resources/vad/voip/vad_nnt_806_hu32_hl1_hla3_pf15_nf15_acf_4.0_mfr31000000_mfl1000000_mfps0_ts0_usec00_usedelta0_useacc0_mbo1_bs1000.tffnn'),
            #'model': online_update('resources/vad/voip/vad_nnt_1196_hu512_hl1_hla3_pf30_nf15_acf_4.0_mfr31000000_mfl1000000_mfps0_ts0_usec00_usedelta0_useacc0_mbo1_bs1000.tffnn'),
            'model': online_update('resources/vad/voip/vad_nnt_1196_hu512_hl1_hla3_pf30_nf15_acf_4.0_mfr32000000_mfl1000000_mfps0_ts0_usec00_usedelta0_useacc0_mbo1_bs1000.tffnn'),
            'filter_length': 2,
        },
    },
    'ASR': {
        'debug': True,
        'type': 'Google',
        'n_rawa': 5,
        'Kaldi': {
            'debug': False,
            'verbose': 0,
            'max_dec_frames': 10,
            'config': online_update('applications/PublicTransportInfoCS/hclg/models/mfcc.conf'),
            'model': online_update('applications/PublicTransportInfoCS/hclg/models/tri2b_bmmi.mdl'),
            'matrix': online_update('applications/PublicTransportInfoCS/hclg/models/tri2b_bmmi.mat'),
            'silent_phones': online_update('applications/PublicTransportInfoCS/hclg/models/silence.csl'),
            'hclg': online_update('applications/PublicTransportInfoCS/hclg/models/HCLG_tri2b_bmmi.fst'),
            'wst': online_update('applications/PublicTransportInfoCS/hclg/models/words.txt'),
            'extra_args': '  --max-mem=10000000000 --acoustic-scale=0.1 --beam=12.0 --lattice-beam=6.0 --max-active=5000',
        },
        'Google': {
            'debug': False,
            'language': 'en',
            'maxresults': 20,
            'key': 'PRIVATE KEY'
        }
    },
    'SLU': {
        'debug': False,
        'type': DAILogRegClassifier,
        DAILogRegClassifier: {
            'cldb_fname': as_project_path("applications/PublicTransportInfoCS/data/database.py"),
            #'preprocessing_cls': PTICSSLUPreprocessing,
            'model_fname': online_update("applications/PublicTransportInfoCS/slu/dailogregclassifier/dailogreg.nbl.model.all"),
        },
    },
    'DM': {
        'debug': True,
        'input_timeout': 3.0,   # in seconds
        'type': 'basic',
        'epilogue': {
            # if set to None, no question is asked
            'final_question': None,
            # if set to None, no code is given
            # if set to a valid url, a code is given and reported to the url as
            # "url.format(code=code)"
            'final_code_url': None,
            # minimum turn count that must be reached for the code giveaway
            'final_code_min_turn_count': 0,
            'final_code_text_min_turn_count_not_reached': None,
            # the message is generated as "final_code_text.format(code=code)"
            'final_code_text': None,
            'final_code_text_repeat': None,
            # initialise the seed of the code generation algorithm
            'code_seed': 1,
        },
        'basic': {
            'debug': True,
            'silence_timeout': 10.0,  # in seconds
        },
        'ontology': as_project_path('applications/PublicTransportInfoCS/data/ontology.py'),
        'dialogue_state': {
            'type': DeterministicDiscriminativeDialogueState,
        },
        'dialogue_policy': {
            'type': DummyDialoguePolicy,
        },
        'DeterministicDiscriminativeDialogueState': {
            'type': 'MDP',  # 'UFAL_DSTC_1.0_approx',
        },
        'UfalRuleDM': {
            'db_cfg': '{cfg_abs_path}/../applications/CamInfoRest/cued_data/CIRdbase_V7_noloc.txt',
            'ontology': '{cfg_abs_path}/../applications/CamInfoRest/ontology.cfg',
            'provide_code': False,
            'code_submit_url': None
        },
        'PUfalRuleDM': {
            'db_cfg': '{cfg_abs_path}/../applications/CamInfoRest/cued_data/CIRdbase_V7_noloc.txt',
            'ontology': '{cfg_abs_path}/../applications/CamInfoRest/ontology.cfg',
            'provide_code': False,
            'code_submit_url': None
        }
    },
    'NLG': {
        'debug': True,
        'type': 'Template',
        'Template': {
            'model': '{cfg_abs_path}/../applications/CamInfoRest/nlgtemplates.cfg'
        },
    },
    'TTS': {
        'debug': True,
        'in_between_segments_silence': 0.01,
        'type': 'Flite',
        'Google': {
            'debug': False,
            'language': 'en',
            'preprocessing': as_project_path("resources/tts/prep_google_en.cfg"),
            'tempo': 1.0,
        },
        'Flite': {
            'debug': False,
            'voice': 'kal16',
            'preprocessing': as_project_path("resources/tts/prep_flite_en.cfg"),
            'tempo': 1.0,
        },
        'SpeechTech': {
            'debug': True,
            'voice': 'Iva210',
            'preprocessing': as_project_path("resources/tts/prep_speechtech_cs.cfg"),
            'tempo': 1.2,
        },
        'VoiceRss': {
            'language': 'en-gb',
            'preprocessing': as_project_path("resources/tts/prep_voicerss_en.cfg"),
            'tempo': 1.0,
        }
    },
    'Hub': {
        'main_loop_sleep_time': 0.001,
        'history_file': 'hub_history_hub.txt',
        'history_length': 1000,
    },
    'SHub': {
        'history_file': 'hub_history_shub.txt',
        'history_length': 1000,
    },
    'THub': {
        'history_file': 'hub_history_thub.txt',
        'history_length': 1000,
    },
    'VoipHub': {
        'pid_file': as_project_path("applications/vhub.pid"),
        'wait_time_before_calling_back': 10,
        'history_length': 1000,
        'hard_time_limit': 6 * 60,  # maximal length of a dialogue in seconds
        'hard_turn_limit': 120,   # maximal number of turn in a dialogue

        'call_db': './call_logs/call_db.pckl',
        'period': 48 * 60 * 60,    # in seconds
        'last_period_max_num_calls': 200,
        'last_period_max_total_time': 120 * 60,  # in seconds
        'blacklist_for': 2 * 60 * 60,            # in seconds
        'limit_reached_message': u'Thank you for calling. Your calling limit was reached. Please call later.',
    },
    'WSHub': {
        'pid_file': as_project_path("applications/wshub.pid"),
        'wait_time_before_calling_back': 10,
        'history_length': 1000,
        'hard_time_limit': 6 * 60,  # maximal length of a dialogue in seconds
        'hard_turn_limit': 120,   # maximal number of turn in a dialogue

        'call_db': './call_logs/call_db.pckl',
        'period': 48 * 60 * 60,    # in seconds
        'last_period_max_num_calls': 200,
        'last_period_max_total_time': 120 * 60,  # in seconds
        'last_period_max_num_short_calls': 500,
        'short_calls_time_duration':       10,          # in seconds
        'blacklist_for': 2 * 60 * 60,            # in seconds
        'limit_reached_message': u'Thank you for calling. Your calling limit was reached. Please call later.',
    },
    'WebHub': {
        'port': 8000,
    },
    'Logging': {
        'system_name': "Default alex",
        'version': "1.0",
        'system_logger': SystemLogger(stdout=False, output_dir='./call_logs'),
        'session_logger': SessionLogger(),
        'excepthook': ExceptionHook(hook_type='log', logger=SystemLogger(stdout=True, output_dir='./call_logs')),
    },
    'corpustools': {
        'get_jasr_confnets': {
            'rt_ratio': 0.2,
            'frame_size': 256,  # size of an audio frame in bytes
        },
    },
    'CRWS': {
        'max_connections_count': -1,
    },
    'weather': {
        'dictionary': as_project_path('applications/PublicTransportInfoCS/weather_cs.cfg'),
        'suffix': 'CZ',
        'units': 'celsius',
    },
    'WSIO': {
        'router_addr': 'localhost',
        'router_port': 9001,
        'listen_addr': '0.0.0.0',
        'listen_port': 9000,
        'alex_addr': 'ws://192.168.0.1:9000/'
    }
}
